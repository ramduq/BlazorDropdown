﻿@using Microsoft.AspNetCore.Components
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime;
@typeparam TItem
@typeparam TIdentity where TIdentity : IConvertible

    @*
        This is a combo box implemented with a Bootstrap dropdown
        that supports generic types and filtering
    *@

@if (Items != null && ItemValue != null && ItemText != null)
{
    <input type="hidden" id="hdnElementId" value="@(ElementId)">
    <div class="dropdown @DivClass" id="@ElementId">

        <a class="@SelectClass"
           role="button"
           tabindex="@SelectTabIndex"
           data-bs-toggle="dropdown"
           aria-expanded="false"
           id="dropdown-select"
           @onclick="OnDropdownClick"
           disabled="@(!Enabled)">
            <span class="text-wrap"> @(SelectedItem != null ? ItemText.Invoke(SelectedItem) : Placeholder) </span>
        </a>

        <ul class="dropdown-menu w-100 bg-light-subtle shadow @ListClass" id="dropdown-list">

            @* filter input *@
            <li class="p-2 pb-1">
                <a class="dropdown" id="input-container">
                    <input type="search"
                           id="dropdown-filter"
                           placeholder="@FilterPlaceholder"
                           @bind="filter" @bind:event="oninput"
                           autocomplete="off"
                           class="form-control form-control-sm small" />
                </a>
            </li>

            @* default option *@
            <li class="ps-2">
                <a class="dropdown-item text-muted" id="item-0" href="javascript:;" @onclick="() => OnItemClick(default)">
                    @Placeholder
                </a>
            </li>

            @* items *@
            @foreach (var item in VisibleItems)
            {
                <li class="ps-2">
                    <a class="dropdown-item" href="javascript:;" @onclick="() => OnItemClick(item)">
                        @(ItemText.Invoke(item))
                    </a>
                </li>
            }

        </ul>
    </div>
}

<script>
    var bcDropdown = {}; // Define bcDropdown object
    var selection = null;
    var idElement = null;

    bcDropdown.initialize = (elemId) => {
        console.log('Initialize');

        var dropdown = document.getElementById(elemId);

        var container = document.getElementById(elemId);
        selection = container.querySelector('a');

        dropdown.addEventListener('show.bs.dropdown', function () {
            arrowsDropdown(elemId);
        });


        idElement = elemId;
    };

    function focusSearchOnAlphanumericKey(event, input) {
        const isLetterOrNumber = /^[a-zA-Z0-9]$/.test(event.key);
        const isInputFocused = (document.activeElement === input);

        console.log('key', event.key);
        console.log('isLetterOrNumber', isLetterOrNumber);
        console.log('isInputFocused', isInputFocused);

        if (isLetterOrNumber && !isInputFocused) {
            input.focus();
            event.preventDefault();
        }
    }

    function arrowsDropdown(elemId) {
        console.log('arrowsDropdown', elemId);

        var container = document.getElementById(elemId);
        var select = container.querySelector('a');
        var list = container.querySelector('ul');
        var inputContainer = document.getElementById('input-container');
        var input = list.querySelector('input');
        var itemZero = list.querySelector('#item-0');
        var tce = new bootstrap.Dropdown(document.getElementById('dropdown1'));
        //tce.toggle()
        //tce.show()
        //tce.hiden()

        //scroll list to top
        list.scrollTop = 0;

        //is dropdown open?
        const isDropdownOpen = () => {
            return select.classList.contains('show');
        };
        const isOpen = isDropdownOpen();
        console.log('Is the dropdown open?', isOpen ? 'Yes' : 'No');
        if (!isOpen) {
            select.addEventListener('keydown', function (event) {
                const isLetterOrNumber = /^[a-zA-Z0-9]$/.test(event.key);
                if (isLetterOrNumber) {
                    tce.show();
                    console.log("se abrio ")
                }
                focusSearchOnAlphanumericKey(event, input);
            });
        }

        //expand/open
        // select.addEventListener('show.bs.dropdown', function () {
        //     console.log('is open')
        // })

        // //hide/close
        // select.addEventListener('hide.bs.dropdown', function () {
        //     console.log('is close')
        // })


        // Focus the input when the a alphanumeric key is pressed
        list.addEventListener('keydown', function (event) {
            focusSearchOnAlphanumericKey(event, input);
        });


        select.addEventListener('keydown', function (event) {
            focusSearchOnAlphanumericKey(event, input);
        });

        //move focus from input to first option, when ArrowDown is pressed
        input.addEventListener('keydown', function (event) {
            if (event.key == 'ArrowDown') {
                itemZero.focus();
                list.scrollTop = 0;
            }
            if (event.key == 'ArrowUp') {
                select.focus();
            }
        });

        itemZero.addEventListener('keyup', function (event) {
            if (event.key == 'ArrowUp') {
                //console.log("Focus input. Keydown ArrowUp")
                list.querySelector('input').focus();
            }
        });

    };

    //****Select focus and print in console ******
    let focusedElement = null;
    function updateFocusedElement() {
        focusedElement = document.activeElement;
        //console.log('Element with focus:', focusedElement);

        if (focusedElement === selection) {
            console.log('the elemenst they are the same');
            arrowsDropdown(idElement);
        }
    }
    document.addEventListener('focus', updateFocusedElement, true);

</script>

@code
{
    const int MAX_LENGTH = 22;
    string filter = string.Empty;

    // Properties

    [Parameter, EditorRequired] public IEnumerable<TItem> Items { get; set; } = [];

    [Parameter, EditorRequired] public Func<TItem, string>? ItemText { get; set; }

    [Parameter, EditorRequired] public Func<TItem, TIdentity?>? ItemValue { get; set; }

    //-- 2-way binding implementation

    [Parameter] public TIdentity? Value { get; set; }

    [Parameter] public EventCallback<TIdentity> ValueChanged { get; set; }


    [Parameter] public bool Enabled { get; set; } = true;

    [Parameter] public string Placeholder { get; set; } = "select...";

    [Parameter] public string FilterPlaceholder { get; set; } = "search...";

    [Parameter] public string ElementId { get; set; } = "dropdown";

    [Parameter] public string DivClass { get; set; } = "";

    [Parameter] public string SelectClass { get; set; } = "form-select";

    [Parameter] public string ListClass { get; set; } = "";

    [Parameter] public EventCallback<TItem?> ItemSelected { get; set; }

    public TItem? SelectedItem => Value is null
        ? default(TItem)
        : Items!.SingleOrDefault(x => ItemValue!.Invoke(x)?.Equals(Value) == true);

    private IEnumerable<TItem> VisibleItems => FilterItems(Items!);

    //-- this allows focusing the element when disabled
    private int? SelectTabIndex => this.Enabled ? 1 : null;


    // Events
    protected override void OnParametersSet()
    {
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntime.InvokeVoidAsync("bcDropdown.initialize", this.ElementId);
    }


    async Task OnDropdownClick()
    {
        //reset filter
        if (!string.IsNullOrWhiteSpace(filter))
            this.filter = string.Empty;

        //run script
        //await jsRuntime.InvokeVoidAsync("initialize", this.ElementId);
    }

    async Task OnItemClick(TItem? item)
    {
        TIdentity? value = (item is null)
            ? default
            : ItemValue!.Invoke(item);

        this.Value = value;
        await ValueChanged.InvokeAsync(value);
        await ItemSelected.InvokeAsync(item);
    }

    //Methods
    public void ClearSelection() => Value = default;

    IEnumerable<TItem> FilterItems(IEnumerable<TItem> list)
    {
        if (list == null || !list.Any())
            return new TItem[0].AsEnumerable();

        if (string.IsNullOrWhiteSpace(filter))
            return list;

        return list
            .Where(x => ItemText!.Invoke(x)?.ContainsLike(filter) == true);
    }

}