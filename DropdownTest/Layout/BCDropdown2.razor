@using Microsoft.AspNetCore.Components
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime;
@typeparam TItem
@typeparam TIdentity where TIdentity : IConvertible, IEquatable<TIdentity>

    @*
        This is a combo box implemented with a Bootstrap dropdown
        that supports generic types and filtering
    *@


@if (Items != null && ItemValue != null && ItemText != null)
{
    <div class="dropdown @DivClass" id="@ElementId">

        <a class="@SelectClass"
           role="button"
           tabindex="@SelectTabIndex"
           data-bs-toggle="dropdown" aria-expanded="false"
           id="dropdown-select"
           @onclick="OnDropdownClick"
           disabled="@(!Enabled)">

            <span class="text-wrap"> @(SelectedItem != null ? ItemText.Invoke(SelectedItem) : Placeholder) </span>
        </a>

        <ul class="dropdown-menu w-100 bg-light-subtle shadow @ListClass" id="dropdown-list">

            @* filter input *@
            <li class="">
                <a class="dropdown-item" id="search-box">
                    <input type="search"
                           id="dropdown-filter"
                           placeholder="@FilterPlaceholder"
                           @bind="filter" @bind:event="oninput"
                           autocomplete="off"
                           tabindex="0"
                           class="form-control form-control-sm border-secondary small" />
                </a>
            </li>

            @* default option *@
            @* An href value is needed to be accesible via keyboard *@

            <li>
                <a class="dropdown-item text-muted small" @onclick="() => OnItemClick(default)" id="item-0" href="javascript:;">
                    @NoValueItemText &nbsp;
                </a>
            </li>

            @* items *@
            @{
                int index = 0;
            }
            @foreach (var item in VisibleItems)
            {
                index++;   
                <li @onclick="() => OnItemClick(item)" 
                    class="@(@ItemValue.Invoke(item)?.Equals(Value) == true ? "active" : "")">

                    <a class="dropdown-item py-0" href="javascript:;" id="item-@(index)">  
                        @if (ItemTemplate != null)
                        {
                            @* custom markup: *@
                            @ItemTemplate(item)
                        }
                        else
                        {
                            <span class="my-1"> @ItemText.Invoke(item) </span>
                        }
                    </a>
                </li>
            }
        </ul>
    </div>

}

<script>
    var bcDropdown = {};
    
    bcDropdown.initialize = (elemId) => {
        console.log('initialize', elemId);

        var element = document.getElementById(elemId);
        var select = element.querySelector('#dropdown-select');
        var list = element.querySelector('ul');
        var searchContainer = element.querySelector('#search-box');
        var input = element.querySelector('#search-box > input');
        var item0 = element.querySelector('#item-0');
        var item1 = element.querySelector('#item-1');
        var listItems = element.querySelectorAll('a.dropdown-item');

        // console.log('element', element);
        // console.log('select', select);
        // console.log('list', list);
        // console.log('input', input);
        // console.log('item0', item0);
        // console.log('item1', item1);

        //bootstrap dropdown object
        bootstrapComp = new bootstrap.Dropdown(element);
                
        //set dropdown-expand event
        element.addEventListener("show.bs.dropdown", () => {
            console.log('on show.bs.dropdown');
            input.scrollIntoView();//not working
            list.scrollTop = 0;//not working
        })

        //focus search box on alphanumeric key 
        list.addEventListener('keydown', (event) => {
            if (document.activeElement != input && /^[a-zA-Z0-9]$/.test(event.key)) {
                console.log('on select ArrowDown');
                //focus search
                input.focus();
            }
        });
        select.addEventListener('keydown', (event) => {
            if (/^[a-zA-Z0-9]$/.test(event.key)) {
                console.log('on select alphanumeric keydown ');
                //expand if not expanded
                if (!list.checkVisibility()) {
                    bootstrapComp.show();
                }
                //focus search
                input.focus();
            }
        });

        //set arrow navigation: select -> input -> item0 -> item 1 ...

        select.addEventListener('keyup', (event) => {
            console.log('on select keyup:', event.key);
            if (event.key == 'ArrowDown') {
                input.focus();
            }
        });

        input.addEventListener('keyup', (event) => {
            if (event.key == 'ArrowUp') {
                console.log('on input ArrowUp');
                select.focus();
            } else if (event.key == 'ArrowDown') {
                console.log('on input ArrowDown');
                item0.focus();
            }
        });

        item0.addEventListener('keyup', (event) => {
            if (event.key == 'ArrowUp') {
                console.log('on item0 ArrowUp keypress');
                input.focus();
            } 
        });
    };

</script>

@code
{
    const int MAX_LENGTH = 22;
    string filter = string.Empty;

    // Properties

    [Parameter, EditorRequired] public IEnumerable<TItem> Items { get; set; } = [];

    [Parameter, EditorRequired] public Func<TItem, TIdentity?> ItemValue { get; set; } = default!;

    [Parameter, EditorRequired] public Func<TItem, string> ItemText { get; set; } = default!;

    [Parameter] public Func<IEnumerable<TItem>, string, IEnumerable<TItem>>? FilterFunction { get; set; } 

    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; } = default!;


    //-- 2-way binding implementation

    [Parameter] public TIdentity? Value { get; set; }

    [Parameter] public EventCallback<TIdentity> ValueChanged { get; set; }


    [Parameter] public bool Enabled { get; set; } = true;

    [Parameter] public string Placeholder { get; set; } = "Select...";

    [Parameter] public string NoValueItemText { get; set; } = "(No selection)";

    [Parameter] public string FilterPlaceholder { get; set; } = "search...";

    [Parameter, EditorRequired] public string ElementId { get; set; } = default!;

    [Parameter] public string DivClass { get; set; } = "";

    [Parameter] public string SelectClass { get; set; } = "form-select";

    [Parameter] public string ListClass { get; set; } = "";


    [Parameter] public EventCallback<TItem?> ItemSelected { get; set; }


    public TItem? SelectedItem => Value is null
        ? default(TItem)
        : Items!.SingleOrDefault(x => ItemValue!.Invoke(x)?.Equals(Value) == true);

    private IEnumerable<TItem> VisibleItems => Filter(Items!);

    //-- this allows focusing the element when disabled
    private int? SelectTabIndex => this.Enabled ? 0 : null;


    // Events

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        //run script
        if (isFirstRender)
            await jsRuntime.InvokeVoidAsync("bcDropdown.initialize", this.ElementId);
    }


    async void OnDropdownClick()
    {
        //reset filter
        this.filter = string.Empty;
    }

    async Task OnItemClick(TItem? item)
    {
        TIdentity? value = (item is null)
            ? default
            : ItemValue!.Invoke(item);

        this.Value = value;
        await ValueChanged.InvokeAsync(value);
        await ItemSelected.InvokeAsync(item);
    }


    //Methods

    public void ClearSelection() => Value = default;

    IEnumerable<TItem> Filter(IEnumerable<TItem> list)
    {
        //If custom function provided, invoke it
        if (FilterFunction != null)
        {
            return FilterFunction.Invoke(list, filter);
        }

        //Otherwise filter by ItemText
        //
        if (list == null || !list.Any())
            return new TItem[0].AsEnumerable();

        if (string.IsNullOrWhiteSpace(filter))
            return list;

        return list
            .Where(x => ItemText.Invoke(x)?.ContainsLike(filter) == true);
    }
}
