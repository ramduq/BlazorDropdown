@page "/page1"
@using Bogus;

<PageTitle> @PageTitle </PageTitle>

<div class="container">

    <h5> @PageTitle</h5>

    <div class="card card-body col-md-6 my-3 border-info">

        <BCDropdown ElementId="dropdown1"
                    Items="data"
                    TItem="SimpleRecord" TIdentity="string"
                    ItemValue="@(x => x.Code)"
                    ItemText="@(x => $"{x.Code} - {x.Name}")"
                    @bind-Value="@selectedValue"
                    ItemSelected="OnItemSelected"
                    Enabled="@enabled1">
            
            <ItemTemplate Context="x">

                <span class="badge bg-warning mx-2"> @x.Name </span>

            </ItemTemplate>
                
        </BCDropdown>



        <br />

        <p> 
            <label class="fw-bold">Selected value:</label> @selectedValue 
        </p>

        <p>
            <label class="fw-bold">Selected Item:</label> @selectedValue
            <pre> @selectedItem.Serialize(true) </pre>
        </p>
        
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="enabled1" id="chk1">
            <label class="form-check-label" for="chk1"> Enabled </label>
        </div>
    </div>

    <div class="card card-body col-md-6 my-3 border-info">
        <BCDropdown ElementId="dropdown2"
                     Items="data"
                     TItem="SimpleRecord" TIdentity="string"
                     ItemValue="@(x => x.Code)"
                     ItemText="@(x => $"{x.Code} - {x.Name}")"
                     @bind-Value="@selectedValue2"
                     ItemSelected="OnItemSelected2"
                     Enabled="@enabled1">

            <ItemTemplate Context="x">

                <span class="badge bg-danger mx-2"> @x.Name </span>

            </ItemTemplate>

        </BCDropdown>
    </div>



    <div class="card card-body col-md-6 my-3 bg-danger">
        <h6> Select </h6>
        <select class="form-select">
            @foreach (var item in data)
            {
                <option> @item.Code - @item.Name </option>
            }
        </select>
    </div>

   

</div>

<br/>
<br/>


@code {
    const string PageTitle = "Dropdown with template";

    string? selectedValue = "0633";
    string? selectedValue2 = "0006";

    bool enabled1 = true;
    SimpleRecord? selectedItem;
    SimpleRecord? selectedItem2;

    List<SimpleRecord> data = new();

    protected override Task OnInitializedAsync()
    {
        //dummy data
        data = GenerateFakeData();

        return base.OnInitializedAsync();
    }

    void OnItemSelected(SimpleRecord? item) => selectedItem = item;

    void OnItemSelected2(SimpleRecord? item) => selectedItem2 = item;


    // Methods

    List<SimpleRecord> GenerateFakeData()
    {
        Randomizer.Seed = new Random(8675309); //predictable data

        var cityFaker = new Faker<SimpleRecord>()
            .RuleFor(o => o.Code, f => f.IndexFaker.ToString().PadLeft(4, '0'))
            .RuleFor(o => o.Name, f => f.Address.City());

        var results = cityFaker.Generate(20);
        return results;
    }
}
